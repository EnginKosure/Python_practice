-- =============================================SOURCE_FACT_ACTUARY==================================================
-- Author      : in@geb.com, kosure@geb.com
-- Create date : 01-08-2021 (updated on 19-10-2021 according to TSv_07)
-- Description : Provides the final table for fact_actuary
-- Input       : `geb-dwh-test.uat_geb_dwh_eu_act.fact_actuary_staging`, `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_1`, &__id_2, &__id_3, &__id_4
-- Output      : fact_actuary table
-- Related DAG : actuary_uat_v2.py
-- TODOs       : 
-- ===================================================================================================================

-- ===================================================================================================================
--CTE-1, TO CALCULATE KEEP_CLAIM AND ANNUALIZED_PAID ACCORDING TO SELECTED_CLAIM_ID
-- ===================================================================================================================
WITH fa AS (SELECT * EXCEPT(ESCALATION_PCT,APPEARANCE, VALIDFROM, VALIDTILL, CREATED_ON),
         COALESCE(SAFE_DIVIDE(
                  SUM(PAID) OVER (PARTITION BY SELECTED_CLAIM_ID, RE_BALANCEYEARPTF) , 
                  COUNTIF(PAID<>0) OVER (PARTITION BY SELECTED_CLAIM_ID, RE_BALANCEYEARPTF)
                  ),0)*4 AS ANNUALIZED_PAID,
         ESCALATION_PCT,
         CASE  
            WHEN SELECTED_CLAIM_ID IN (SELECT CLAIMID_1 FROM `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_1`) 
               THEN (SELECT DISTINCT KEEP_CLAIM FROM  `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_1` cl1 WHERE cl1.CLAIMID_1=SELECTED_CLAIM_ID)
            WHEN SELECTED_CLAIM_ID IN (SELECT CLAIMID_2 FROM `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_2`) 
               THEN (SELECT DISTINCT KEEP_CLAIM FROM  `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_2` cl2 WHERE cl2.CLAIMID_2=SELECTED_CLAIM_ID)
            WHEN SELECTED_CLAIM_ID IN (SELECT CLAIMID_3 FROM `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_3`) 
               THEN (SELECT DISTINCT KEEP_CLAIM FROM  `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_3` cl3 WHERE cl3.CLAIMID_3=SELECTED_CLAIM_ID)
            WHEN SELECTED_CLAIM_ID IN (SELECT CLAIMID_4 FROM `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_4`) 
               THEN (SELECT DISTINCT KEEP_CLAIM FROM  `geb-dwh-test.uat_geb_dwh_eu_act.source_keep_claim_id_4` cl4 WHERE cl4.CLAIMID_4=SELECTED_CLAIM_ID)
            ELSE 'n/a'
         END AS KEEP_CLAIM,
         APPEARANCE,
         VALIDFROM,
         VALIDTILL, 
         CREATED_ON

FROM `geb-dwh-test.uat_geb_dwh_eu_act.fact_actuary_staging`),

-- ===================================================================================================================
--CTE-2, TO CALCULATE COUNTS OF DATES (CLAIMDATE,INSUREDBIRTHDATE,CLAIM_BENEFITBEGDATE,CLAIM_BENEFITENDDATE)
-- ===================================================================================================================
za AS (SELECT *,
CLAIMDATE CLDT,
SAFE.PARSE_DATE("%d/%m/%Y", CLAIMDATE) AS CLDT_P,
--Those 3 line below (ROW_NR,RNK,DENSE_RNK) is forr testing purposes, will be excluded in the final table
ROW_NUMBER() OVER (PARTITION BY SELECTED_CLAIM_ID ORDER BY CLAIMDATE) AS ROW_NR,
RANK() OVER (PARTITION BY SELECTED_CLAIM_ID ORDER BY CLAIMDATE) AS RNK,
DENSE_RANK() OVER (PARTITION BY SELECTED_CLAIM_ID ORDER BY CLAIMDATE) AS DENSE_RNK,
-- MAX(CLAIMDATE) OVER (PARTITION BY SELECTED_CLAIM_ID) AS CNT_CLAIMDATE,
COUNT(CLAIMDATE) OVER(PARTITION BY SELECTED_CLAIM_ID, CLAIMDATE) AS CNT_CLDT,
COUNT(INSUREDBIRTHDATE) OVER(PARTITION BY SELECTED_CLAIM_ID, INSUREDBIRTHDATE) AS CNT_INSBDT,
COUNT(CLAIM_BENEFITBEGDATE) OVER(PARTITION BY SELECTED_CLAIM_ID, CLAIM_BENEFITBEGDATE) AS CNT_CLBENBEGDT,
COUNT(CLAIM_BENEFITENDDATE) OVER(PARTITION BY SELECTED_CLAIM_ID, CLAIM_BENEFITENDDATE) AS CNT_CLBENENDDT,

 FROM fa
 --This line below is for testing purposes, can be opened to see the results within a narrow frame.
-- WHERE SELECTED_CLAIM_ID !=CLAIMID_1 AND SELECTED_CLAIM_ID!=CLAIMID_3 AND SELECTED_CLAIM_ID IN ('083129_GL_01/01/1900','141031000_STD_N/A','0225500784 OLD_GAS_N/A','083129_GL_30/11/2014','80131024301_GAS_N/A','80131023582_GAS_N/A','80131023194_GAS_N/A')
 GROUP BY fa.CLAIMDATE,SELECTED_CLAIM_ID,LOCALINSURER,RE_BALANCEYEARPTF,RE_QUARTERPTF, CLAIMDWHID,LICOUNTRY,COMPANY_CODE,LOCALCLIENT,POLICY_NR,PO_COVER_INCLUDING_TYPE,LINEOFPRODUCT,
 COVERDESCRIPTION_NEW,COVERCODE_NEW,PO_LINEOFRISK,CARRIERREFERENCE,GENDER,CLAIMID_1,CLAIMID_2,CLAIMID_3,CLAIMID_4,AY_ACCIDENT_YEAR,LASTPAYMENTDATE,INSUREDBIRTHDATE,CLAIM_BENEFITBEGDATE,
CLAIM_BENEFITENDDATE,LOCALCURRENCY,RE_PORTFOLIO,CURRENTQUARTER,CURRENTDAY,AGEOFINSURED,CY_PY,RE_EXPERIENCEYEARPTF,ANNUITY,LUMPSUM,PAID,BEGRES,ENDRES,PO_ANNUALBENEFITAMOUNT,ANNUALIZED_PAID,
ESCALATION_PCT,KEEP_CLAIM,APPEARANCE,VALIDFROM,VALIDTILL,CREATED_ON
ORDER BY SELECTED_CLAIM_ID, ROW_NR,LOCALINSURER, RE_BALANCEYEARPTF, RE_QUARTERPTF),

-- ===================================================================================================================
-- CTE-3, TO CALCULATE UNIQUE DATES, FIRST RULE (MOST FREQUENT, MOST RECENT) FOR UNIQUE_CLAIMDATE, 
-- ONLY RULE FOR UNIQUE_INSUREDBIRTHDATE,UNIQUE_CLAIM_BENEFITBEGDATE,UNIQUE_CLAIM_BENEFITENDDATE
-- ===================================================================================================================
zb AS (SELECT *,
LAST_VALUE(CLDT) OVER(PARTITION BY SELECTED_CLAIM_ID ORDER BY CNT_CLDT ASC,CLDT_P ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS UNIQUE_CLAIMDATE,--that works
LAST_VALUE(INSUREDBIRTHDATE) OVER(PARTITION BY SELECTED_CLAIM_ID ORDER BY CNT_INSBDT,INSUREDBIRTHDATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS UNIQUE_INSUREDBIRTHDATE,
LAST_VALUE(CLAIM_BENEFITBEGDATE) OVER(PARTITION BY SELECTED_CLAIM_ID ORDER BY CNT_CLBENBEGDT,CLAIM_BENEFITBEGDATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS UNIQUE_CLAIM_BENEFITBEGDATE,
LAST_VALUE(CLAIM_BENEFITENDDATE) OVER(PARTITION BY SELECTED_CLAIM_ID ORDER BY CNT_CLBENENDDT,CLAIM_BENEFITENDDATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS UNIQUE_CLAIM_BENEFITENDDATE,

 FROM za
  GROUP BY za.CLAIMDATE,SELECTED_CLAIM_ID,LOCALINSURER,RE_BALANCEYEARPTF,RE_QUARTERPTF, CLAIMDWHID,LICOUNTRY,COMPANY_CODE,LOCALCLIENT,POLICY_NR,PO_COVER_INCLUDING_TYPE,LINEOFPRODUCT,
 COVERDESCRIPTION_NEW,COVERCODE_NEW,PO_LINEOFRISK,CARRIERREFERENCE,GENDER,CLAIMID_1,CLAIMID_2,CLAIMID_3,CLAIMID_4,AY_ACCIDENT_YEAR,LASTPAYMENTDATE,INSUREDBIRTHDATE,CLAIM_BENEFITBEGDATE,
CLAIM_BENEFITENDDATE,LOCALCURRENCY,RE_PORTFOLIO,CURRENTQUARTER,CURRENTDAY,AGEOFINSURED,CY_PY,RE_EXPERIENCEYEARPTF,ANNUITY,LUMPSUM,PAID,BEGRES,ENDRES,PO_ANNUALBENEFITAMOUNT,ANNUALIZED_PAID,
ESCALATION_PCT,KEEP_CLAIM,APPEARANCE,VALIDFROM,VALIDTILL,CREATED_ON,ROW_NR,RNK,DENSE_RNK,CNT_CLDT,CLDT_P,CNT_INSBDT,CNT_CLBENBEGDT,CNT_CLBENENDDT),

-- ===================================================================================================================
-- CTE-4, TO CALCULATE THE FIELDS THAT DEPENDS ON UNIQUE DATES:
-- UNIQUE_CLAIMDATE ==> UNIQUE_ACCIDENT_YEAR, UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS; 
-- UNIQUE_INSUREDBIRTHDATE ==> UNIQUE_AGEOFINSURED; 
-- ===================================================================================================================
zc AS (SELECT  
CLAIMDWHID,LICOUNTRY,LOCALINSURER,COMPANY_CODE,LOCALCLIENT,POLICY_NR,PO_COVER_INCLUDING_TYPE,LINEOFPRODUCT,COVERDESCRIPTION_NEW,COVERCODE_NEW,
PO_LINEOFRISK,CARRIERREFERENCE,GENDER,CLAIMID_1,CLAIMID_2,CLAIMID_3,CLAIMID_4,SELECTED_CLAIM_ID,CLAIMDATE,AY_ACCIDENT_YEAR,LASTPAYMENTDATE,
INSUREDBIRTHDATE,CLAIM_BENEFITBEGDATE,CLAIM_BENEFITENDDATE,LOCALCURRENCY,RE_PORTFOLIO,RE_BALANCEYEARPTF,RE_QUARTERPTF,CURRENTQUARTER,CURRENTDAY,
AGEOFINSURED,CY_PY,RE_EXPERIENCEYEARPTF,ANNUITY,LUMPSUM,PAID,BEGRES,ENDRES,PO_ANNUALBENEFITAMOUNT,ANNUALIZED_PAID,ESCALATION_PCT,KEEP_CLAIM,
APPEARANCE,UNIQUE_CLAIMDATE, CNT_CLDT, CLDT_P,

   CASE 
      WHEN SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE) IS NOT NULL OR SAFE_CAST(UNIQUE_CLAIMDATE AS DATE) IS NOT NULL
         THEN FORMAT_DATE("%Y",SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE))
      ELSE NULL
   END AS UNIQUE_ACCIDENT_YEAR,

UNIQUE_INSUREDBIRTHDATE,
UNIQUE_CLAIM_BENEFITBEGDATE,
UNIQUE_CLAIM_BENEFITENDDATE,

ROUND(DATE_DIFF(LAST_DAY(CAST(CONCAT(RE_BALANCEYEARPTF,'-',CAST(IF(RE_QUARTERPTF IN ('0', '0 or 4 ??'),'1',RE_QUARTERPTF) AS INT64 )*3,'-15') AS DATE), QUARTER), UNIQUE_INSUREDBIRTHDATE,DAY)/365.24,2) UNIQUE_AGEOFINSURED,

DATE_DIFF(DATE_SUB(LAST_DAY(CAST(CONCAT(RE_BALANCEYEARPTF,'-',CAST(IF(RE_QUARTERPTF IN ('0', '0 or 4 ??'),'1',RE_QUARTERPTF) AS INT64 )*3,'-15') AS DATE), quarter), INTERVAL 45 DAY), SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE), QUARTER) AS UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS,

-- UNIQUE_CY_PY CALCULATION MOVE UPPER

VALIDFROM,VALIDTILL,CREATED_ON

FROM zb
ORDER BY zb.SELECTED_CLAIM_ID, ROW_NR,zb.LOCALINSURER, zb.RE_BALANCEYEARPTF, zb.RE_QUARTERPTF),

-- ===================================================================================================================
-- CTE-5, TO RECALCULATE THE UNIQUE_CLAIMDATE, 
-- APPLY THE SECOND RULE: IF UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS<0, TAKE THE OLDEST (EARLIEST) CLAIM DATE
-- ===================================================================================================================
zd AS (SELECT 
CLAIMDWHID,LICOUNTRY,LOCALINSURER,COMPANY_CODE,LOCALCLIENT,POLICY_NR,PO_COVER_INCLUDING_TYPE,LINEOFPRODUCT,COVERDESCRIPTION_NEW,COVERCODE_NEW,
PO_LINEOFRISK,CARRIERREFERENCE,GENDER,CLAIMID_1,CLAIMID_2,CLAIMID_3,CLAIMID_4,SELECTED_CLAIM_ID,CLAIMDATE,AY_ACCIDENT_YEAR,LASTPAYMENTDATE,
INSUREDBIRTHDATE,CLAIM_BENEFITBEGDATE,CLAIM_BENEFITENDDATE,LOCALCURRENCY,RE_PORTFOLIO,RE_BALANCEYEARPTF,RE_QUARTERPTF,CURRENTQUARTER,CURRENTDAY,
AGEOFINSURED,CY_PY,RE_EXPERIENCEYEARPTF,ANNUITY,LUMPSUM,PAID,BEGRES,ENDRES,PO_ANNUALBENEFITAMOUNT,ANNUALIZED_PAID,ESCALATION_PCT,KEEP_CLAIM,
APPEARANCE,

CASE 
   WHEN zc.UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS<0 THEN LAST_VALUE(CLAIMDATE) OVER(PARTITION BY SELECTED_CLAIM_ID ORDER BY CLDT_P DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
   ELSE UNIQUE_CLAIMDATE
END AS UNIQUE_CLAIMDATE,

UNIQUE_ACCIDENT_YEAR,

UNIQUE_INSUREDBIRTHDATE,
UNIQUE_CLAIM_BENEFITBEGDATE,
UNIQUE_CLAIM_BENEFITENDDATE,
UNIQUE_AGEOFINSURED,
UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS,

-- UNIQUE_CY_PY CALCULATION MOVE UPPER

VALIDFROM,VALIDTILL,CREATED_ON

FROM zc)
-- END OF CTEs
-- =========================================================

-- ===================================================================================================================
-- MAIN QUERY
-- RECALCULATE THE UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS AND CALCULATE UNIQUE_CY_PY  
-- ACCORDING TO CHANGED UNIQUE_CLAIMDATEs (DUE TO SECOND RULE) 
-- ===================================================================================================================
SELECT CLAIMDWHID,LICOUNTRY,LOCALINSURER,COMPANY_CODE,LOCALCLIENT,POLICY_NR,PO_COVER_INCLUDING_TYPE,LINEOFPRODUCT,COVERDESCRIPTION_NEW,COVERCODE_NEW,
PO_LINEOFRISK,CARRIERREFERENCE,GENDER,CLAIMID_1,CLAIMID_2,CLAIMID_3,CLAIMID_4,SELECTED_CLAIM_ID,CLAIMDATE,AY_ACCIDENT_YEAR,LASTPAYMENTDATE,
INSUREDBIRTHDATE,CLAIM_BENEFITBEGDATE,CLAIM_BENEFITENDDATE,LOCALCURRENCY,RE_PORTFOLIO,RE_BALANCEYEARPTF,RE_QUARTERPTF,CURRENTQUARTER,CURRENTDAY,
AGEOFINSURED,CY_PY,RE_EXPERIENCEYEARPTF,ANNUITY,LUMPSUM,PAID,BEGRES,ENDRES,PO_ANNUALBENEFITAMOUNT,ANNUALIZED_PAID,ESCALATION_PCT,KEEP_CLAIM,
APPEARANCE,
UNIQUE_CLAIMDATE,
UNIQUE_ACCIDENT_YEAR,
UNIQUE_INSUREDBIRTHDATE,
UNIQUE_CLAIM_BENEFITBEGDATE,
UNIQUE_CLAIM_BENEFITENDDATE,
UNIQUE_AGEOFINSURED,
DATE_DIFF(DATE_SUB(LAST_DAY(CAST(CONCAT(RE_BALANCEYEARPTF,'-',CAST(IF(RE_QUARTERPTF IN ('0', '0 or 4 ??'),'1',RE_QUARTERPTF) AS INT64 )*3,'-15') AS DATE), quarter), INTERVAL 45 DAY), SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE), QUARTER) AS UNIQUE_DEVELOPMENT_PERIOD_IN_QUARTERS,
-- UNIQUE_CY_PY,
   CASE
      WHEN SAFE_CAST(SAFE.FORMAT_DATE("%Y",SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE)) AS INT64 )=RE_BALANCEYEARPTF THEN "CY"
      WHEN SAFE_CAST(SAFE.FORMAT_DATE("%Y",SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE)) AS INT64)<0 THEN "CY"--2nd
      WHEN SAFE_CAST(SAFE.FORMAT_DATE("%Y",SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE)) AS INT64)<RE_BALANCEYEARPTF THEN "PY"--3rd
      WHEN SAFE_CAST(SAFE.FORMAT_DATE("%Y",SAFE.PARSE_DATE("%d/%m/%Y", UNIQUE_CLAIMDATE)) AS INT64) IS NULL THEN "n.a."
   END AS UNIQUE_CY_PY,--new field

VALIDFROM,VALIDTILL,CREATED_ON

FROM zd